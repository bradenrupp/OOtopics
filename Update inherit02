__author__ = "on line source"

from abc import ABCMeta, abstractmethod
class Vehicle(object):
    """A vehicle for sale by Jeffco Car Dealership.


    Attributes:
        wheels: An integer representing the number of wheels the vehicle has.
        miles: The integral number of miles driven on the vehicle.
        make: The make of the vehicle as a string.
        model: The model of the vehicle as a string.
        year: The integral year the vehicle was built.
        sold_on: The date the vehicle was sold.
    """

    __metaclass__ = ABCMeta

    base_sale_price = 0
    wheels = 0

    def __init__(self, miles, make, model, year, sold_on):
        self.miles = miles
        self.make = make
        self.model = model
        self.year = year
        self.sold_on = sold_on

    def sale_price(self):
        """Return the sale price for this vehicle as a float amount."""
        if self.sold_on is not None:
            return 0.0  # Already sold
        return 5000.0 * self.wheels

    def purchase_price(self):
        """Return the price for which we would pay to purchase the vehicle."""
        if self.sold_on is None:
            return 0.0  # Not yet sold
        return self.base_sale_price - (.10 * self.miles)
        
    def repair_cost(self, cost_of_repair, date_of_repair):
        self.cost_of_repair = [cost_of_repair]
        self.date_of_repair = [date_of_repair]
    """ set up local variables cost_of_repair, date_of_repair
    ... make these variables of type list so that each time 
    ... a repair occurs, the fact can be retained.
    

    @abstractmethod
    def vehicle_type(self):
        """"Return a string representing the type of vehicle this is."""
    pass
        
class Car(Vehicle):
    """A car for sale by Jeffco Car Dealership."""

    base_sale_price = 8000
    wheels = 4

    def vehicle_type(self):
        """"Return a string representing the type of vehicle this is."""
        return 'car'

    def vehicle_wheels(self):
        return "Number of Wheels:" , Car.wheels

class Truck(Vehicle):
    """A truck for sale by Jeffco Car Dealership."""

    base_sale_price = 10000
    wheels = 4

    def vehicle_type(self):
        """"Return a string representing the type of vehicle this is."""
        return 'truck'

    def vehicle_wheels(self):
        return "Number of Wheels:" , Truck.wheels
        
class Motorcycle(Vehicle):
    """A motorcycle for sale by Jeffco Car Dealership."""

    base_sale_price = 4000
    wheels = 2

    def vehicle_type(self):
        """"Return a string representing the type of vehicle this is."""
        return 'motorcycle'

    def set_salePrice(self, sale_price):
        self.base_sale_price = sale_price


def main():
    #Creates a car, truck and motorcycle
    car1 = Car(100000, "Honda", "Prelude", 1998, None)
    car1.repair_cost("1000", "2012")
    truck1 = Truck(85000, "Ford", "F-150", 2010, 2014)
    motorcycle1 = Motorcycle(35000, "Kawasaki", "Ninja", 2012, None)

    #Car information
    print("Vehicle Type: "),
    print(car1.vehicle_type())
    print("Vehicle Wheels: "),
    print(car1.wheels)
    print("Vehicle Sale Price: "),
    print(car1.sale_price())
    print

    #Truck information
    print("Vehicle Type: "),
    print(truck1.vehicle_type())
    print("Vehicle Wheels: "),
    print(truck1.wheels)
    print("Vehicle Sale Price: "),
    print(truck1.sale_price())
    print


    #Motorcycle information
    print("Vehicle Type: "),
    print(motorcycle1.vehicle_type())
    print("Vehicle Wheels: "),
    print(motorcycle1.wheels)
    print("Vehicle Sale Price: "),
    print(motorcycle1.sale_price())
    print





    
if __name__ == "__main__":
    main() 

    

       
